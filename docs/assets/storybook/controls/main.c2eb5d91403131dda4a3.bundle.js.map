{"version":3,"file":"main.c2eb5d91403131dda4a3.bundle.js","sources":["webpack:///./src/inputs/MaskedInput/MaskedInput.js"],"sourcesContent":["import React, {Component} from 'react';\nimport {Input} from 'semantic-ui-react';\nimport isFunction from 'lodash/isFunction';\nimport 'inputmask/dist/inputmask/inputmask.numeric.extensions';\nimport Inputmask from 'inputmask';\n\n/**\n * See source code for detailed prop types or {@link https://github.com/RobinHerbots/jquery.inputmask|here} for more info.\n * @typedef {Object} inputmaskPropTypes\n */\n\n// type Props = {\n// \tvalue?: string,\n// \tonChange?: (data: string) => {},\n// \tonBlur?: () => {},\n// \tmask?: {\n// \t\tplaceholder?: string,\n// \t\toptionalmarker?: {\n// \t\t\tstart: string,\n// \t\t\tend: string,\n// \t\t},\n// \t\tquantifiermarker?: {\n// \t\t\tstart: string,\n// \t\t\tend: string,\n// \t\t},\n// \t\tgroupmarker?: {\n// \t\t\tstart: string,\n// \t\t\tend: string,\n// \t\t},\n// \t\talternatormarker?: string,\n// \t\tescapeChar?: string,\n// \t\tmask: string,\n// \t\trepeat?: number,\n// \t\tgreedy?: boolean,\n// \t\tautoUnmask?: boolean,\n// \t\tremoveMaskOnSubmit?: boolean,\n// \t\tclearMaskOnLostFocus?: boolean,\n// \t\tinsertMode?: boolean,\n// \t\tclearIncomplete?: boolean,\n// \t\talias?: string,\n// \t\tonKeyDown?: (event: any, buffer: any, caretPos: number, opts?: Object) => {},\n// \t\tonBeforeMask?: (initialValue: string, opts?: Object) => string,\n// \t\tonBeforePaste?: (pastedValue: string, opts?: Object) => string,\n// \t\tonBeforeWrite?: (event: any, buffer: any, caretPos: number, opts?: Object) => Object,\n// \t\tonUnMask?: (maskedValue: string, unmaskedValue: string) => string,\n// \t\tshowMaskOnFocus?: boolean,\n// \t\tshowMaskOnHover?: boolean,\n// \t\tonKeyValidation?: (key: any, result: any) => {},\n// \t\tnumericInput?: boolean,\n// \t\trightAlign?: boolean,\n// \t\tundoOnEscape?: boolean,\n// \t\tradixPoint?: string,\n// \t\tgroupSeparator?: string,\n// \t\tkeepStatic?: boolean,\n// \t\tpositionCaretOnTab?: boolean,\n// \t\ttabThrough?: boolean,\n// \t\tisComplete?: (buffer: any, opts?: Object) => boolean,\n// \t\tcanClearPosition?: (maskset: any, position: number, lastValidPosition: number, opts?: Object) => boolean,\n// \t\tpostValidation?: (buffer: any, currentResult: any, opts?: any) => boolean | Object,\n// \t\tpreValidation?: (buffer: any, pos: number, char: any, isSelection: boolean, opts?: Object) => boolean | Object,\n// \t\tstaticDefinitionSymbol?: string,\n// \t\tnullable?: boolean,\n// \t\tpositionCaretOnClick?: string,\n// \t\tcasing?: string,\n// \t\tinputmode?: string,\n// \t\tcolorMask?: string,\n// \t}\n// };\n\nfunction getConvertFunction(type) {\n\tif (isFunction(type)) return type;\n\tswitch (type) {\n\t\tcase 'number':\n\t\t\treturn str => {\n\t\t\t\tif (!str || str === '') return 0;\n\t\t\t\treturn parseInt(str, 10);\n\t\t\t};\n\t\tcase 'string':\n\t\tdefault:\n\t\t\treturn str => str;\n\t}\n}\n\n/**\n * Displays a masked input form. Warning: this component uses jquery for masking so it renders quite slow. Do not use\n * hundreds of these on one screen at the same time.\n * @class\n * @property {string|number} [value=null] - The value to display\n * @property {onChange} [onChange=null] - Called when the value changes.\n * @property {inputmaskPropTypes} [mask=null] - The mask object specified at {@link https://github.com/RobinHerbots/jquery.inputmask|here}.\n * @property {type} - The type of the value that will be returned.\n */\nexport default class MaskedInput extends Component {\n\tstatic displayName = 'MaskedInput';\n\n\tstatic defaultProps = {\n\t\tvalue: null,\n\t\tonChange: null,\n\t\tmask: null,\n\t};\n\n\tcomponentDidMount() {\n\t\tif (this.props.value && this._input) this._input.value = this.props.value;\n\t\tconst im = new Inputmask({\n\t\t\t...this.props.mask,\n\t\t\toncomplete: this.handleComplete,\n\t\t\toncleared: this.handleCleared,\n\t\t\tonincomplete: this.handleIncomplete,\n\t\t});\n\t\tim.mask(this._input);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.value !== this.props.value && this._input) {\n\t\t\tthis._input.value = this.props.value || '';\n\t\t}\n\t\tif (prevProps.mask !== this.props.mask) {\n\t\t\tconst im = new Inputmask({\n\t\t\t\t...this.props.mask,\n\t\t\t\toncomplete: this.handleComplete,\n\t\t\t\toncleared: this.handleCleared,\n\t\t\t\tonincomplete: this.handleIncomplete,\n\t\t\t});\n\t\t\tim.mask(this._input);\n\t\t}\n\t}\n\n\thandleComplete = ev => {\n\t\tif (this.props.onChange) {\n\t\t\tthis.props.onChange(getConvertFunction(this.props.type)(ev.target.value));\n\t\t}\n\t};\n\n\thandleCleared = () => {\n\t\tif (this.props.onChange) {\n\t\t\tthis.props.onChange(getConvertFunction(this.props.type)(''));\n\t\t}\n\t};\n\n\thandleIncomplete = ev => {\n\t\tif (this.props.onChange) {\n\t\t\tthis.props.onChange(getConvertFunction(this.props.type)(ev.target.value));\n\t\t}\n\t};\n\n\trender() {\n\t\tconst {value, onChange, onBlur, mask, type, ...rest} = this.props;\n\t\treturn (\n\t\t\t<Input {...rest} >\n\t\t\t\t<input ref={r => (this._input = r)} onBlur={onBlur}/>\n\t\t\t</Input>\n\t\t);\n\t}\n}\n"],"mappings":"AAqEA","sourceRoot":""}