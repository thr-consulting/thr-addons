{"version":3,"file":"Environment.js","sources":["../../src/Environment.ts"],"sourcesContent":["interface Dict<T> {\n\t[key: string]: T;\n}\n\nexport type EnvironmentDefaultDict = Dict<string | number | boolean | Record<string, unknown>>;\nexport type EnvironmentDict = Dict<string | Record<string, unknown> | undefined>;\n\nexport class Environment {\n\tprivate static instance: Environment;\n\treadonly #stringDict: Dict<string | undefined>; // Store all environment variables, except records.\n\treadonly #recordDict: Dict<Record<string, unknown>>; // Store record environment variables.\n\treadonly #defaults: EnvironmentDefaultDict;\n\treadonly #isDevelopment: boolean;\n\treadonly #isProduction: boolean;\n\n\tprivate constructor() {\n\t\tthis.#stringDict = {};\n\t\tthis.#recordDict = {};\n\t\tthis.#defaults = {};\n\t\tthis.#isProduction = process.env.NODE_ENV === 'production';\n\t\tthis.#isDevelopment = !this.#isProduction;\n\t}\n\n\t/**\n\t * Get the singleton instance of Environment.\n\t */\n\tpublic static getInstance(): Environment {\n\t\tif (!Environment.instance) {\n\t\t\tEnvironment.instance = new Environment();\n\t\t}\n\t\treturn Environment.instance;\n\t}\n\n\t/**\n\t * Returns true if NODE_ENV is not production, otherwise false.\n\t */\n\tpublic static isDevelopment() {\n\t\treturn this.getInstance().isDevelopment();\n\t}\n\tprotected isDevelopment() {\n\t\treturn this.#isDevelopment;\n\t}\n\n\t/**\n\t * Returns true if NODE_ENV is production, otherwise false.\n\t */\n\tpublic static isProduction() {\n\t\treturn this.getInstance().isProduction();\n\t}\n\tprotected isProduction() {\n\t\treturn this.#isProduction;\n\t}\n\n\t/**\n\t * Adds a dictionary of environment values. The values can be either a string, or Record.\n\t * @param env\n\t */\n\tpublic static addEnvironment(env: EnvironmentDict) {\n\t\tEnvironment.getInstance().addEnvironment(env);\n\t}\n\tprotected addEnvironment(env: EnvironmentDict) {\n\t\tObject.keys(env).forEach(key => {\n\t\t\tconst envElement = env[key];\n\t\t\tif (!envElement) return;\n\t\t\tif (typeof envElement === 'string') {\n\t\t\t\tthis.#stringDict[key] = envElement;\n\t\t\t} else {\n\t\t\t\tthis.#recordDict[key] = envElement;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Adds a dictionary of environment default values. The values can be either a string, boolean, number, or Record.\n\t * @param defaults\n\t */\n\tpublic static addDefaults(defaults: EnvironmentDefaultDict) {\n\t\tEnvironment.getInstance().addDefaults(defaults);\n\t}\n\tprotected addDefaults(defaults: EnvironmentDefaultDict) {\n\t\tObject.keys(defaults).forEach(key => {\n\t\t\tthis.#defaults[key] = defaults[key];\n\t\t});\n\t}\n\n\t/**\n\t * Returns the raw string (or Record) value. If the `key` is not found, returns the default value, converted to string (except Records).\n\t * @param key\n\t * @param def\n\t */\n\tpublic static get(key: string, def?: string | Record<string, unknown>): string | undefined | Record<string, unknown> {\n\t\treturn Environment.getInstance().get(key, def);\n\t}\n\tprotected get(key: string, def?: string | Record<string, unknown>): string | undefined | Record<string, unknown> {\n\t\tif (key in this.#stringDict) {\n\t\t\treturn this.#stringDict[key];\n\t\t}\n\t\tif (key in this.#recordDict) {\n\t\t\treturn this.#recordDict[key];\n\t\t}\n\t\tif (key in this.#defaults) {\n\t\t\tconst sysdef = this.#defaults[key];\n\t\t\tif (typeof sysdef === 'string') {\n\t\t\t\treturn sysdef;\n\t\t\t}\n\t\t\tif (typeof sysdef === 'number') {\n\t\t\t\treturn sysdef.toString(10);\n\t\t\t}\n\t\t\tif (typeof sysdef === 'boolean') {\n\t\t\t\treturn sysdef ? 'true' : 'false';\n\t\t\t}\n\t\t\treturn sysdef;\n\t\t}\n\t\treturn def;\n\t}\n\n\t/**\n\t * Gets an environment value as a string. If key is not found, the default is returned.\n\t * Number and boolean defaults are converted into strings. Record defaults are not returned.\n\t * @param key\n\t * @param def\n\t */\n\tpublic static getString(key: string, def?: string): string {\n\t\treturn Environment.getInstance().getString(key, def);\n\t}\n\tprotected getString(key: string, def?: string): string {\n\t\tif (key in this.#stringDict) {\n\t\t\treturn this.#stringDict[key] || '';\n\t\t}\n\t\tif (key in this.#defaults) {\n\t\t\tconst sysdef = this.#defaults[key];\n\t\t\tif (typeof sysdef === 'string') {\n\t\t\t\treturn sysdef || '';\n\t\t\t}\n\t\t\tif (typeof sysdef === 'number') {\n\t\t\t\treturn sysdef.toString(10);\n\t\t\t}\n\t\t\tif (typeof sysdef === 'boolean') {\n\t\t\t\treturn sysdef ? 'true' : 'false';\n\t\t\t}\n\t\t}\n\t\treturn def || '';\n\t}\n\n\t/**\n\t * Gets an environment value as an integer number. If key is not found, the default is returned.\n\t * String and boolean defaults are attempted to be converted into numbers. Record defaults are not returned.\n\t * @param key\n\t * @param def\n\t */\n\tpublic static getInt(key: string, def?: number): number {\n\t\treturn Environment.getInstance().getInt(key, def);\n\t}\n\tprotected getInt(key: string, def?: number): number {\n\t\tif (key in this.#stringDict) {\n\t\t\treturn parseInt(this.#stringDict[key] || '0', 10);\n\t\t}\n\t\tif (key in this.#defaults) {\n\t\t\tconst sysdef = this.#defaults[key];\n\t\t\tif (typeof sysdef === 'number') {\n\t\t\t\treturn sysdef;\n\t\t\t}\n\t\t\tif (typeof sysdef === 'boolean') {\n\t\t\t\treturn sysdef ? 1 : 0;\n\t\t\t}\n\t\t\tif (typeof sysdef === 'string') {\n\t\t\t\tif (!sysdef.includes('.')) {\n\t\t\t\t\tthrow new Error('Error converting string number to integer. String contains a decimal.');\n\t\t\t\t}\n\t\t\t\treturn parseInt(sysdef, 10);\n\t\t\t}\n\t\t}\n\t\treturn def || 0;\n\t}\n\n\t/**\n\t * Gets an environment value as a float number. If key is not found, the default is returned.\n\t * String and boolean defaults are attempted to be converted into numbers. Record defaults are not returned.\n\t * @param key\n\t * @param def\n\t */\n\tpublic static getFloat(key: string, def?: number): number {\n\t\treturn Environment.getInstance().getFloat(key, def);\n\t}\n\tprotected getFloat(key: string, def?: number): number {\n\t\tif (key in this.#stringDict) {\n\t\t\treturn parseFloat(this.#stringDict[key] || '0');\n\t\t}\n\t\tif (key in this.#defaults) {\n\t\t\tconst sysdef = this.#defaults[key];\n\t\t\tif (typeof sysdef === 'number') {\n\t\t\t\treturn sysdef;\n\t\t\t}\n\t\t\tif (typeof sysdef === 'boolean') {\n\t\t\t\treturn sysdef ? 1 : 0;\n\t\t\t}\n\t\t\tif (typeof sysdef === 'string') {\n\t\t\t\treturn parseFloat(sysdef);\n\t\t\t}\n\t\t}\n\t\treturn def || 0;\n\t}\n\n\t/**\n\t * Gets an environment value as a boolean. If key is not found, the default is returned.\n\t * String and number defaults are attempted to be converted into a boolean. Record defaults are not returned.\n\t * @param key\n\t * @param def\n\t */\n\tpublic static getBool(key: string, def?: boolean) {\n\t\treturn Environment.getInstance().getBool(key, def);\n\t}\n\tprotected getBool(key: string, def?: boolean): boolean {\n\t\tif (key in this.#stringDict) {\n\t\t\treturn this.#stringDict[key] === 'true';\n\t\t}\n\t\tif (key in this.#defaults) {\n\t\t\tconst sysdef = this.#defaults[key];\n\t\t\tif (typeof sysdef === 'boolean') {\n\t\t\t\treturn sysdef;\n\t\t\t}\n\t\t\tif (typeof sysdef === 'string') {\n\t\t\t\treturn sysdef === 'true';\n\t\t\t}\n\t\t\tif (typeof sysdef === 'number') {\n\t\t\t\treturn !(sysdef === 0);\n\t\t\t}\n\t\t}\n\t\treturn def || false;\n\t}\n\n\t/**\n\t * Gets an environment value as a Record. If key is not found, the default is returned.\n\t * Only record defaults are returned.\n\t * @param key\n\t * @param def\n\t */\n\tpublic static getRecord(key: string, def?: Record<string, unknown>) {\n\t\treturn Environment.getInstance().getRecord(key, def);\n\t}\n\tprotected getRecord(key: string, def?: Record<string, unknown>) {\n\t\tif (key in this.#recordDict) {\n\t\t\treturn this.#recordDict;\n\t\t}\n\t\tif (key in this.#defaults) {\n\t\t\tconst sysdef = this.#defaults[key];\n\t\t\tif (typeof sysdef !== 'string' && typeof sysdef !== 'boolean' && typeof sysdef !== 'number') {\n\t\t\t\treturn sysdef;\n\t\t\t}\n\t\t}\n\t\treturn def || {};\n\t}\n}\n"],"names":[],"mappings":"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"}